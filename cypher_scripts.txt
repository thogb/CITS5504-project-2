// ++++++++ Loading csv data ++++++++

// Load player node
LOAD CSV WITH HEADERS FROM "file:///player_node.csv" AS row
CREATE (p:Player {
    playerId: row.player_id,
    name: row.name,
    position: row.position,
    jerseyNumber: row.jersey_number,
    age: row.age,
    dateOfBirth: row.date_of_birth,
    height: row.height,
    caps: row.caps,
    goals: row.goals,
    plays: row.plays
})

// Load country node
LOAD CSV WITH HEADERS FROM "file:///country_node.csv" AS row
CREATE (c:Country {
    countryId: row.country_id,
    name: row.name
})

// Load club node
LOAD CSV WITH HEADERS FROM "file:///club_node.csv" AS row
CREATE (c:Club {
    clubId: row.club_id,
    name: row.name
})

// Load relation from
LOAD CSV WITH HEADERS FROM "file:///rel_from.csv" AS row
MATCH (p:Player {playerId: row.player_id}), 
(c:Country {countryId: row.country_id})
CREATE (p)-[:FROM]->(c)

// Load relation located_in
LOAD CSV WITH HEADERS FROM "file:///rel_located_in.csv" AS row
MATCH (cb:Club {clubId: row.club_id}), 
(cy:Country {countryId: row.country_id})
CREATE (cb)-[:LOCATED_IN]->(cy)

// Load relation plays_for
LOAD CSV WITH HEADERS FROM "file:///rel_plays_for.csv" AS row
MATCH (p:Player {playerId: row.player_id}),                     
(c:Club {clubId: row.club_id})
CREATE (p)-[:PLAYS_FOR]->(c)

// ++++++++ Queries ++++++++

// What is the jersy number of the player with <a specific player id>?
Match (p:Player {playerId: "336722"}) 
return p.jerseyNumber

// Which clubs are based in <a specific country>?
Match (c:Country {name: "Australia"})<-[:LOCATED_IN]-(cb:Club)
return cb.name

// Which club does <a specific player>  play for?
Match (p:Player {playerId: "336722"})-[:PLAYS_FOR]->(c:Club)
return c.name

// How old is <a specific player>?
Match (p:Player {playerId: "336722"})
return p.age

// In which country is the club that <a specific player> plays for?
Match (p:Player {playerId: "336722"})-[:PLAYS_FOR]->(cb:Club)-[:LOCATED_IN]->(c:Country)
return c.name

// Find a club that has players from <a specific country>.
Match (cb:Club)<-[:PLAYS_FOR]-(p:Player)-[:FROM]->(c:Country {name: "Australia"})
return cb.name LIMIT 1

// Find all players play at <a specific club>, returning in ascending orders of age.
Match (p:Player)-[:PLAYS_FOR]->(c:Club {clubId: "1"})
return p.name
order by p.age ASC

// Find all <a specific position> players in national team of <a specific country>, returning in descending order of caps.
Match (p:Player {position: "Defender"})-[:FROM]->(c:Country {name: "Australia"})
return p.name
order by p.caps DESC

// Find all players born in <a specific year> and in national team of <a specific country>, returning in descending order of caps.
Match (p:Player)-[:FROM]->(c:Country {name: "Australia"})
Where p.dateOfBirth ends with "1993"
return p.name
order by p.caps DESC

// Find the players that belongs to the same club in national team of <a specific country>, returning in descending order of international goals.
Match (c1:Country {name: "Australia"})<-[:LOCATED_IN]-(cb:Club)<-[:PLAYS_FOR]-(p:Player)-[:FROM]->(c2:Country {name: "Australia"})
return p.name
order by p.goals DESC

// Count how many players are born in <a specific year>.
Match (p:Player)
Where p.dateOfBirth ends with "1993"
return count(*)

// Which age has the highest participation in the 2014 FIFA World Cup?
Match (p:Player)
with count(*) as ageCount, p.age as pAge
return ageCount, pAge
order by ageCount DESC limit 1

// Find the path with a length of 2 or 3 between <two specific clubs>.
Match path = (:Club {clubId: "1"})-[*2..3]-(:Club {clubId: "12"})
return path

// Find the top 5 countries with players who have the highest average number of international goals. Return the countries and their average international goals in descending order.
Match (p:Player)-[:FROM]->(c:Country)
with avg(p.goals) as goal
return c.name, goal
order by goal DESC

// (CITS5504 only) Identify pairs of players from the same national team who play in different positions but have the closest number of caps. Return these pairs along with their positions and the difference in caps.
// Idea retrieved from: https://neo4j.com/developer/kb/using-max-and-min-while-keeping-items/#_complex_when_it_should_be_simple
// Date: 26/05/2024
Match (p1:Player)-[:FROM]->(c:Country)<-[:FROM]-(p2:Player)
where p1.position <> p2.position
with p1, p2, min(abs(toInteger(p1.caps) - toInteger(p2.caps))) as diffCaps
order by diffCaps ASC
with count(p1.name) as p1Count, p1.name as p1Name, collect(p1)[0] as pFirst, collect(p2)[0] as pSecond, collect(diffCaps)[0] as pairDiffCaps
return pFirst.name, pFirst.caps, pSecond.name, pSecond.caps, pairDiffCaps

// Q1: Display the list of players from Australia ordered by max goals in descending order and player name in ascending order.
Match (p:Player)-[:FROM]->(c:Country {name: "Australia"})
return p.name, p.goals
order by toInteger(p.goals) DESC, p.name ASC

// Q2: Find the player with the highest goal in all countries.
Match (p:Player)-[:FROM]->(c:Country)
with p, c
order by p.goals DESC, p.name ASC
with count(c) as cCount, c, collect(p)[0] as maxPlayer
return c.name, maxPlayer.name, maxPlayer.goals
